{"version":3,"sources":["components/Header.js","components/TerminalApp.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","TerminalApp","style","display","justifyContent","alignItems","height","js_default","color","backgroundColor","barColor","fontWeight","fontSize","commands","open-google","window","open","showmsg","popup","alert","descriptions","msg","TabPanel","props","children","value","index","other","Object","objectWithoutProperties","Typography","assign","component","role","hidden","id","concat","aria-labelledby","Box","p","a11yProps","aria-controls","useStyles","makeStyles","theme","root","flexGrow","NavBar","classes","_React$useState","React","useState","_React$useState2","slicedToArray","setValue","className","AppBar","position","Tabs","centered","onChange","event","newValue","aria-label","Tab","label","components_Header","components_TerminalApp","App","components_NavBar","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6d42410.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div>Header</div>\r\n    );\r\n}\r\n\r\n\r\nexport default Header;","import React from 'react';\r\nimport Terminal from 'terminal-in-react';\r\n\r\nconst TerminalApp = () => {\r\n    const showMsg = () => 'hi im stuff';\r\n    return (\r\n    <div style={{ display: \"flex\", justifyContent: \"center\", alignItems: \"center\", height: \"100vh\" }}>  \r\n        <Terminal\r\n          color='green'\r\n          backgroundColor='black'\r\n          barColor='black'\r\n          style={{ fontWeight: \"bold\", fontSize: \"1em\" }}\r\n          commands={{\r\n            'open-google': () => window.open('google.com', '_blank'),\r\n            showmsg: showMsg,\r\n            popup: () => alert('Terminal in React')\r\n          }}\r\n          descriptions={{\r\n            'open-google': 'opens google.com',\r\n            showmsg: 'shows a message',\r\n            alert: 'alert', popup: 'alert'\r\n          }}\r\n          msg='Hello World! type help for list of commands'\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TerminalApp;","import React from 'react';\r\nimport Header from './Header';\r\nimport TerminalApp from './TerminalApp';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n      <div style={{backgroundColor: \"#e0e2e6\"}}>\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n      \r\n    >\r\n      <Box p={4}>{children}</Box>\r\n    </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    'aria-controls': `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  function handleChange(event, newValue) {\r\n    setValue(newValue);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Tabs centered='true' value={value} onChange={handleChange} aria-label=\"simple tabs example\">\r\n          <Tab label=\"Home\" {...a11yProps(0)} />\r\n          <Tab label=\"About\" {...a11yProps(1)} />\r\n          <Tab label=\"Hobbies\" {...a11yProps(2)} />\r\n          <Tab label=\"Hack\" {...a11yProps(3)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <Header/>\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n          <Header/>\r\n        Item Two\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        <Header />\r\n        Item Three\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <Header />\r\n        <TerminalApp />\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport TerminalApp from './components/TerminalApp';\n\nfunction App() {\n    return (\n        <div>\n            <NavBar/>\n            <TerminalApp msg=\"Hello World\"/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n// #00205b\t(0,32,91)\n// #7c7e7f\t(124,126,127)\n// #adc7dc\t(173,199,220)\n// #e0e2e6\t(224,226,230)\n// #9fddf9\t(159,221,249)\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}