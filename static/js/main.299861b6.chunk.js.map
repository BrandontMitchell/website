{"version":3,"sources":["components/Header.js","components/TerminalApp.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","card","maxWidth","textAlign","alignContent","media","height","Header","classes","react_default","a","createElement","className","style","TerminalApp","display","justifyContent","alignItems","js_default","color","backgroundColor","barColor","fontWeight","fontSize","commands","open-google","window","open","showmsg","popup","alert","descriptions","msg","TabPanel","props","children","value","index","other","Object","objectWithoutProperties","Typography","assign","component","role","hidden","id","concat","aria-labelledby","Box","p","a11yProps","aria-controls","theme","root","flexGrow","NavBar","_React$useState","React","useState","_React$useState2","slicedToArray","setValue","AppBar","position","Tabs","centered","onChange","event","newValue","variant","textColor","inicatorColor","aria-label","Tab","label","icon","Favorite_default","components_Header","components_TerminalApp","App","components_NavBar","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.299861b6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n      maxWidth: 345,\r\n      textAlign: 'center',\r\n      alignContent: 'center',\r\n    },\r\n    media: {\r\n      height: 140,\r\n    },\r\n  });\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.card}>\r\n            <h1 style={{textAlign: 'center'}}>Brandon Mitchell</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Terminal from 'terminal-in-react';\r\n\r\nconst TerminalApp = () => {\r\n    const showMsg = () => 'hi im stuff';\r\n    return (\r\n        <div style={\r\n            {\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                height: \"100vh\"\r\n            }\r\n        }>\r\n            <Terminal color='green' backgroundColor='black' barColor='black'\r\n                style={\r\n                    {\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"1em\"\r\n                    }\r\n                }\r\n                commands={\r\n                    {\r\n                        'open-google': () => window.open('google.com', '_blank'),\r\n                        showmsg: showMsg,\r\n                        popup: () => alert('Terminal in React')\r\n                    }\r\n                }\r\n                descriptions={\r\n                    {\r\n                        'open-google': 'opens google.com',\r\n                        showmsg: 'shows a message',\r\n                        alert: 'alert',\r\n                        popup: 'alert'\r\n                    }\r\n                }\r\n                msg='Hello World! type help for list of commands'/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TerminalApp;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport TerminalApp from './TerminalApp';\r\nimport PropTypes from 'prop-types';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\nfunction TabPanel(props) {\r\n    const {\r\n        children,\r\n        value,\r\n        index,\r\n        ...other\r\n    } = props;\r\n\r\n    return (\r\n        <div style={\r\n            {backgroundColor: \"#e0e2e6\"}\r\n        }>\r\n            <Typography component=\"div\" role=\"tabpanel\"\r\n                hidden={\r\n                    value !== index\r\n                }\r\n                id={\r\n                    `simple-tabpanel-${index}`\r\n                }\r\n                aria-labelledby={\r\n                    `simple-tab-${index}`\r\n                }\r\n                {...other}>\r\n                <Box p={4}>\r\n                    {children}</Box>\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired\r\n};\r\n\r\nfunction a11yProps(index) {\r\n    return {id: `simple-tab-${index}`, 'aria-controls': `simple-tabpanel-${index}`};\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\nconst NavBar = () => {\r\n    const classes = useStyles();\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    function handleChange(event, newValue) {\r\n        setValue(newValue);\r\n    }\r\n\r\n    return (\r\n        <div className={\r\n            classes.root\r\n        }>\r\n            <AppBar position=\"static\">\r\n                <Tabs centered='true'\r\n                    value={value}\r\n                    onChange={handleChange}\r\n                    variant=\"fullWidth\"\r\n                    textColor=\"inherit\"\r\n                    inicatorColor=\"secondary\"\r\n                    aria-label=\"simpicon label tabs example\">\r\n                    <Tab label=\"Home\" {...a11yProps(0)}/>\r\n                    <Tab label=\"About\" icon={<FavoriteIcon />} {...a11yProps(1)}/>\r\n                    <Tab label=\"Hobbies\" {...a11yProps(2)}/>\r\n                    <Tab label=\"Hack\" {...a11yProps(3)}/>\r\n                </Tabs>\r\n            </AppBar>\r\n            <TabPanel value={value}\r\n                index={0}>\r\n                <Header/>\r\n            </TabPanel>\r\n            <TabPanel value={value}\r\n                index={1}>\r\n                <Header/>\r\n                Item Two\r\n            </TabPanel>\r\n            <TabPanel value={value}\r\n                index={2}>\r\n                <Header/>\r\n                Item Three\r\n            </TabPanel>\r\n            <TabPanel value={value}\r\n                index={3}>\r\n                <Header/>\r\n                <TerminalApp/>\r\n            </TabPanel>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport TerminalApp from './components/TerminalApp';\n\nfunction App() {\n    return (\n        <div>\n            <NavBar/>\n        </div>\n    );\n}\n\nexport default App;\n\n\n// #00205b\t(0,32,91)\n// #7c7e7f\t(124,126,127)\n// #adc7dc\t(173,199,220)\n// #e0e2e6\t(224,226,230)\n// #9fddf9\t(159,221,249)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}